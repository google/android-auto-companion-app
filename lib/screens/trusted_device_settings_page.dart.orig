import 'package:flutter/material.dart';
import 'car.dart';
import 'common_app_bar.dart';
import 'connection_manager.dart';
import 'screens/trusted_device_intro_page.dart';
import 'screens/unlock_history_page.dart';
import 'string_localizations.dart';
import 'values/dimensions.dart'
    as dimensions;
import 'package:provider/provider.dart';

const _bodyPadding = 16.0;
const _buttonHeight = 36.0;
const _buttonWidth = 271.0;

/// Trusted device feature main page. Shows feature enrollment status and also
/// allows user to turn on/off the feature.
class TrustedDeviceSettingsPage extends StatefulWidget {
  final Car car;
  TrustedDeviceSettingsPage({Key key, @required this.car}) : super(key: key);

  @override
  State<StatefulWidget> createState() => TrustedDeviceSettingsState();
}

@visibleForTesting
class TrustedDeviceSettingsState extends State<TrustedDeviceSettingsPage>
    implements TrustAgentCallback {
  ConnectionManager _connectionManager;
  var _isTrustedDeviceEnabled = false;
  var _isDeviceUnlockRequired = true;

  @override
  void initState() {
    super.initState();
    _connectionManager = Provider.of<ConnectionManager>(context, listen: false);
    _connectionManager.registerTrustAgentCallback(this);
    _updateConfigurationAndStatus();
  }

  @override
  void dispose() {
    super.dispose();
    _connectionManager.unregisterTrustAgentCallback(this);
  }

  @override
  Widget build(BuildContext context) {
    final strings = StringLocalizations.of(context);
    return Scaffold(
      appBar: commonAppBar(
        context,
        title: strings.shortUnlockExplanation,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.only(
                    top: dimensions.featurePageTopPadding,
                    right: dimensions.featurePageHorizontalPadding,
                    left: dimensions.featurePageHorizontalPadding,
                  ),
                  child: Text(
                    strings.trustedDeviceExplanation,
                    style: Theme.of(context).textTheme.bodyText2,
                  ),
                ),
                _toggleButton(),
              ],
            ),
          ),
          _divider(),
          if (_isTrustedDeviceEnabled) ..._enabledEntries()
        ],
      ),
    );
  }

  @override
  void onEnrollmentCompleted(String carId) {
    if (carId == widget.car.id) {
      _updateConfigurationAndStatus();
    }
  }

  @override
  void onUnlockStatusChanged(String carId, UnlockStatus status) {
    // Ignored. Unlock status is not displayed on this page.
  }

  @override
  void onPasscodeNotSet() {
    // TODO(b/150016452): Notify the user that their passcode is not set.
  }

  Widget _toggleButton() {
    final strings = StringLocalizations.of(context);
    return Padding(
      padding: EdgeInsets.all(_bodyPadding),
      child: ButtonTheme(
        height: _buttonHeight,
        minWidth: _buttonWidth,
        child: RaisedButton(
          color: _isTrustedDeviceEnabled
              ? Theme.of(context).colorScheme.surface
              : Theme.of(context).primaryColor,
          textColor: _isTrustedDeviceEnabled
              ? Theme.of(context).primaryColor
              : Theme.of(context).colorScheme.onPrimary,
          onPressed: () async {
            if (_isTrustedDeviceEnabled) {
              _connectionManager.stopTrustAgentEnrollment(widget.car);
            } else {
              final isConnected =
                  await _connectionManager.isCarConnected(widget.car);
              isConnected
                  ? _navigateToTrustedDeviceInfoPage()
                  : _showCarNotConnectedDialog();
            }
            _updateConfigurationAndStatus();
          },
          child:
              Text(_isTrustedDeviceEnabled ? strings.turnOff : strings.turnOn),
        ),
      ),
    );
  }

  Future<void> _navigateToTrustedDeviceInfoPage() async {
    await Navigator.push(
        context,
        MaterialPageRoute(
            builder: (_) => TrustedDeviceIntroPage(associatedCar: widget.car)));
    _updateConfigurationAndStatus();
  }

  void _showCarNotConnectedDialog() {
    final strings = StringLocalizations.of(context);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(strings.carNotConnectedWarningTitle),
          content: Text(strings.carNotConnectedWarningContent),
          actions: [
            FlatButton(
              textColor: Theme.of(context).primaryColor,
              onPressed: Navigator.of(context).pop,
              child: Text(strings.alertDialogOkButton),
            ),
          ],
        );
      },
    );
  }

  List<Widget> _enabledEntries() =>
      [_unlockConfiguration(), _divider(), _recentActivity()];

  Widget _divider() => Divider(color: Theme.of(context).dividerColor);

  Widget _unlockConfiguration() {
    final strings = StringLocalizations.of(context);
    return Container(
      padding: EdgeInsets.only(bottom: dimensions.textSpacing),
      child: Column(
        children: [
          ListTile(
            title: Text(
              strings.quickUnlockConfigurationLabel,
              style: Theme.of(context)
                  .textTheme
                  .subtitle1
                  .apply(color: Theme.of(context).colorScheme.onBackground),
            ),
          ),
          ListTile(
              title: Text(strings.quickUnlockSecureOption,
                  style: Theme.of(context).textTheme.bodyText1),
              trailing: Visibility(
                visible: _isDeviceUnlockRequired,
                child: Icon(Icons.check, color: Theme.of(context).primaryColor),
              ),
              onTap: () => setDeviceUnlockRequired(true)),
          ListTile(
              title: Text(strings.quickUnlockConvenientOption,
                  style: Theme.of(context).textTheme.bodyText1),
              trailing: Visibility(
                visible: !_isDeviceUnlockRequired,
                child: Icon(Icons.check, color: Theme.of(context).primaryColor),
              ),
              onTap: () => setDeviceUnlockRequired(false)),
          ListTile(
            title: Text(
                _isDeviceUnlockRequired
                    ? strings.secureOptionExplanation
                    : strings.convenientOptionExplanation,
                style: Theme.of(context).textTheme.bodyText2),
          ),
        ],
      ),
    );
  }

  void setDeviceUnlockRequired(bool isRequired) {
    _connectionManager.setDeviceUnlockRequired(widget.car, isRequired);
    setState(() {
      _isDeviceUnlockRequired = isRequired;
    });
  }

  Widget _recentActivity() {
    final strings = StringLocalizations.of(context);
    return InkWell(
      onTap: () {
        Navigator.push(
            context,
            MaterialPageRoute(
                builder: (_) => UnlockHistoryPage(car: widget.car)));
      },
      child: Padding(
        padding: EdgeInsets.symmetric(
          horizontal: dimensions.featurePageHorizontalPadding,
          vertical: dimensions.textSpacing,
        ),
        child: Row(
          children: [
            Padding(
              padding: EdgeInsets.only(
                right: dimensions.smallIconPadding,
              ),
              child: Icon(
                Icons.access_time,
                size: dimensions.smallIconSize,
                color: Theme.of(context).primaryColor,
              ),
            ),
            Text(
              strings.recentUnlockActivityTitle,
              style: Theme.of(context)
                  .textTheme
                  .subtitle1
                  .apply(color: Theme.of(context).colorScheme.onBackground),
            ),
          ],
        ),
      ),
    );
  }

  void _updateConfigurationAndStatus() async {
    final isTrustedDeviceEnabled =
        await _connectionManager.isTrustedDeviceEnrolled(widget.car);
    final isDeviceUnlockRequired =
        await _connectionManager.isDeviceUnlockRequired(widget.car);
    setState(() {
      _isTrustedDeviceEnabled = isTrustedDeviceEnabled;
      _isDeviceUnlockRequired = isDeviceUnlockRequired;
    });
  }
}
