import 'package:flutter/material.dart';
import 'car.dart';
import 'common_app_bar.dart';
import 'connection_manager.dart';
import 'screens/bluetooth_warning_page.dart';
import 'string_localizations.dart';
import 'values/bluetooth_state.dart';
import 'values/dimensions.dart'
    as dimensions;
import 'package:meta/meta.dart' show visibleForTesting;
import 'package:mobile.flutter.google_material.components/google_material.dart';
import 'package:provider/provider.dart';

import 'connecting_to_car_page.dart';

const _carVerticalPadding = 10.0;

/// Page which shows the list of cars which are broadcasting.
class SelectCarPage extends StatefulWidget {
  @override
  State createState() => SelectCarPageState();
}

@visibleForTesting
class SelectCarPageState extends State<SelectCarPage>
    implements ConnectionCallback {
  ConnectionManager _connectionManager;

  /// A list of names for cars that can be associated with.
  final _discoveredCars = <Car>{};

  @override
  void initState() {
    super.initState();
    _connectionManager = Provider.of<ConnectionManager>(context, listen: false);
    _connectionManager.registerConnectionCallback(this);
    _startScanForCarsToAssociateIfBluetoothEnabled();
  }

  @override
  void dispose() {
    super.dispose();
    _connectionManager.unregisterConnectionCallback(this);
  }

  @override
  Widget build(BuildContext context) {
    final strings = StringLocalizations.of(context);

    return Scaffold(
      appBar: commonAppBar(
        context,
        onBackPressed: () {
          Navigator.of(context).popUntil((route) => route.isFirst);
          _connectionManager.clearCurrentAssociation();
        },
      ),
      body: Container(
        alignment: Alignment.topCenter,
        padding: EdgeInsets.only(bottom: dimensions.pageBottomPadding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            // Explanation text for telling the user to select a car.
            Padding(
              padding: EdgeInsets.only(
                top: dimensions.appBarBottomPadding,
                right: dimensions.pageHorizontalPadding,
                left: dimensions.pageHorizontalPadding,
              ),
              child: Text(
                strings.selectCarTitle,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.headline4,
              ),
            ),

            // The progress indicator.
            Padding(
              padding: const EdgeInsets.only(
                top: dimensions.progressIndicatorTopPadding,
                left: dimensions.progressIndicatorHorizontalPadding,
                right: dimensions.progressIndicatorHorizontalPadding,
                bottom: dimensions.progressIndicatorBottomPadding,
              ),
              child: LinearProgressIndicator(
                valueColor:
                    AlwaysStoppedAnimation(Theme.of(context).primaryColor),
              ),
            ),

            // The list of discovered cars.
            Expanded(
              child: Scrollbar(child: _carList),
            ),
          ],
        ),
      ),
    );
  }

  /// A list of discovered cars that are available for association.
  ListView get _carList {
    // Note: not using ListView.separated so that a dividing line can be added
    // at the top of the view.
    // This is not accomplished via a border because the line should disappear
    // if there are no items.
    return ListView.builder(
      itemCount: _discoveredCars.length,
      itemBuilder: (context, index) => Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Divider(),
          _carItem(_discoveredCars.elementAt(index)),
        ],
      ),
    );
  }

  /// A row within the car list that represents a car that can be associated
  /// with.
  Widget _carItem(Car car) {
    return InkWell(
      onTap: () {
        Navigator.push(context,
            MaterialPageRoute(builder: (_) => ConnectingPage(id: car.id)));
      },
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: _carVerticalPadding),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Padding(
              padding:
                  EdgeInsets.symmetric(horizontal: dimensions.smallIconPadding),
              child: Icon(Icons.directions_car),
            ),
            Expanded(
              child: Text(
                car.name,
                style: Theme.of(context)
                    .textTheme
                    .bodyText1
                    .apply(color: Theme.of(context).colorScheme.onBackground),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Exposed for testing because unit tests cannot mock the method handler
  // invocations.
  @visibleForTesting
  @override
  void onCarDiscovered(Car car) {
    setState(() {
      _discoveredCars.add(car);
    });
  }

  @visibleForTesting
  @override
  void onConnectionStateChanged(String newState) {
    setState(() {
      _discoveredCars.clear();
    });

    if (newState == BluetoothState.on) {
      _connectionManager.scanForCarsToAssociate();
    } else {
      _navigateToBluetoothWarningPage();
    }
  }

  @override
  void onCarDisconnected(String carId) {}

  @override
  void onCarConnected(String carId) {}

  void _navigateToBluetoothWarningPage() {
    Navigator.push(
        context, MaterialPageRoute(builder: (_) => BluetoothWarningPage()));
  }

  void _startScanForCarsToAssociateIfBluetoothEnabled() async {
    if (await _connectionManager.isBluetoothEnabled) {
      _connectionManager.scanForCarsToAssociate();
    } else {
      _navigateToBluetoothWarningPage();
    }
  }
}
